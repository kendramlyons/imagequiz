{"version":3,"sources":["components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","login","setState","showLoginForm","onSubmit","event","state","username","trim","length","authenticated","preventDefault","handleChange","value","target","name","body","this","type","onChange","className","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RAuEeA,G,wDAlEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAQVC,MAAQ,WAEJ,EAAKC,SAAS,CACVC,eAAe,KAZJ,EAgBnBC,SAAW,SAACC,GAEL,EAAKC,MAAMC,SAASC,OAAOC,OAAS,GACnC,EAAKP,SAAS,CAACQ,eAAc,IAEjCL,EAAMM,kBArBS,EAwBnBC,aAAe,SAACP,GACZ,IAAMQ,EAAQR,EAAMS,OAAOD,MACrBE,EAAOV,EAAMS,OAAOC,KAC1B,EAAKb,SAAL,eAAgBa,EAAOF,KA3BR,EA8BnBG,KAAO,WACH,OACA,yDA9BA,EAAKV,MAAQ,CACTH,eAAe,EACfI,SAAU,GACVG,eAAe,GALJ,E,qDAqCf,OAAKO,KAAKX,MAAMI,eAAkBO,KAAKX,MAAMH,cAGrC,0BAAMC,SAAUa,KAAKb,UACjB,4CACA,2BACAc,KAAK,OACLH,KAAK,WACLF,MAAOI,KAAKX,MAAMC,SAClBY,SAAUF,KAAKL,eAEf,4BAAQM,KAAK,UAAb,UAMR,6BACI,yBAAKE,UAAU,eACbH,KAAKX,MAAMI,cAAgBO,KAAKX,MAAMC,SAClC,4BAAQc,QAASJ,KAAKhB,OAAtB,UAELgB,KAAKD,Y,GA5DHM,IAAMC,Y,MCUVC,MATf,WACE,OACE,yBAAKJ,UAAU,OACX,kBAAC,EAAD,QCIYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9773cf57.chunk.js","sourcesContent":["import React from 'react';\nimport './Home.css';\n// import Login from './Login';\n//can use either \"class\" or \"function\" keyword\nclass Home extends React.Component {\n    constructor(props) { //'props' is always passed to constructor\n        super(props); //have to have 'super' or else error\n        this.state = {\n            showLoginForm: false,\n            username: '',\n            authenticated: false\n        };\n    }\n\n    login = () => { //show login page\n        //needs a state change\n        this.setState({ //changing states causes page to re-render\n            showLoginForm: true\n        });\n    }\n\n    onSubmit = (event) => {\n        //check if user has provided input for user\n        if(this.state.username.trim().length > 0) {\n            this.setState({authenticated:true});\n        }\n        event.preventDefault(); //tells the browser not to do default \n    }\n\n    handleChange = (event) => {\n        const value = event.target.value;\n        const name = event.target.name;\n        this.setState({[name]: value});\n    }\n\n    body = () => {\n        return(\n        <div>Hello from my homepage!</div>\n        );\n    }\n\n    render() {\n        if((!this.state.authenticated) && this.state.showLoginForm) {\n            //shows \n            return(\n                <form onSubmit={this.onSubmit}>\n                    <label>Username:</label>\n                    <input \n                    type=\"text\" \n                    name=\"username\"\n                    value={this.state.username}\n                    onChange={this.handleChange}\n                    ></input>\n                    <button type=\"submit\">Login</button>\n                </form>\n            );\n        }\n        return(\n            //HTML code to display initially\n            <div>\n                <div className=\"loginButton\">\n                 {this.state.authenticated ? this.state.username \n                    : <button onClick={this.login}>Login</button>}\n                </div>\n                {this.body()}\n            </div>\n        );\n\n    }\n}\n\nexport default Home;","import React from 'react';\nimport Home from './components/Home';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Home />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}